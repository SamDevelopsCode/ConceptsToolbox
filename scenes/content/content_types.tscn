[gd_scene load_steps=3 format=3 uid="uid://5nj1k6datt5u"]

[ext_resource type="PackedScene" uid="uid://cx75ggvi8ih8i" path="res://scenes/content/content.tscn" id="1_vxnhr"]
[ext_resource type="PackedScene" uid="uid://bcim245yjlwwf" path="res://scenes/content_components/content_margin_container.tscn" id="2_lvw3p"]

[node name="Types" instance=ExtResource("1_vxnhr")]

[node name="MarginContainer" parent="BGPanel" index="0"]
metadata/_edit_use_anchors_ = true

[node name="ContentContainer" parent="BGPanel/MarginContainer/ScrollContainer/VBoxContainer" index="1" instance=ExtResource("2_lvw3p")]
layout_mode = 2

[node name="RichTextLabel" parent="BGPanel/MarginContainer/ScrollContainer/VBoxContainer/ContentContainer" index="0"]
text = "Types in programming are like containers that hold different kinds of information. They decide what kind of data you can put inside them and what you can do with that data. Think of them as categories: you have types for numbers, types for text, types for true/false values, and so on. Some types are simple, like numbers and letters, while others are more complex, like lists or groups of data. 

Understanding types is fundamental for writing robust and maintainable code. Proper use of types can help prevent bugs, improve code readability, and facilitate code reuse. Additionally, modern programming languages often provide mechanisms for type conversion and type inference, allowing developers to work with types more conveniently while maintaining the benefits of strong typing.

Some basic types commonly found in programming - 

[ul]
Integer: Used to represent whole numbers (e.g., -3, 0, 42).
Floating-point: Used to represent decimal numbers (e.g., -3.14, 0.0, 3.5).
Boolean: Represents true or false values.
Character: Represents a single character (e.g., 'a', 'B', '5').
String: Represents a sequence of characters (e.g., \"hello\", \"123\", \"abc123\").
Array: Represents a collection of elements of the same type arranged in a contiguous block of memory.
Tuple: Represents a fixed-size collection of heterogeneous elements.
Enumeration (Enum): Defines a set of named constant values.
Struct (Structure): A lightweight data structure that groups related data together.
Class: A blueprint for creating objects that contain methods and properties.
[/ul]"

[editable path="BGPanel/MarginContainer/ScrollContainer/VBoxContainer/ContentContainer"]
