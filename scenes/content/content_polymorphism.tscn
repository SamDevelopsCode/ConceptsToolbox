[gd_scene load_steps=3 format=3 uid="uid://facexbwr3q5d"]

[ext_resource type="PackedScene" uid="uid://cx75ggvi8ih8i" path="res://scenes/content/content.tscn" id="1_lv8un"]
[ext_resource type="PackedScene" uid="uid://bcim245yjlwwf" path="res://scenes/content_components/content_margin_container.tscn" id="2_ki518"]

[node name="Polymorphism" instance=ExtResource("1_lv8un")]

[node name="ContentContainer" parent="BGPanel/MarginContainer/ScrollContainer/VBoxContainer" index="1" instance=ExtResource("2_ki518")]
layout_mode = 2

[node name="RichTextLabel" parent="BGPanel/MarginContainer/ScrollContainer/VBoxContainer/ContentContainer" index="0"]
text = "	Polymorphism is a core concept in object-oriented programming (OOP) that allows objects of different classes to be treated as objects of a common base class. It enables flexibility and extensibility in code by allowing methods to operate on objects of different types through a common interface.

1. [b]Base Class and Derived Classes[/b]:
[ul]
    Polymorphism typically involves a base class and one or more derived classes.
    The base class defines a common interface or set of behaviors, while derived classes provide specialized implementations of those behaviors.
[/ul]

2. [b]Method Overriding[/b]:
[ul]
Derived classes can override methods defined in the base class to provide specialized behavior.
When a method is invoked on an object of the base class, the runtime environment selects the appropriate implementation based on the actual type of the object (runtime polymorphism).
[/ul]

3. [b]Example[/b]:
[ul]
For example, consider a base class Shape with a method Draw. Derived classes Circle and Rectangle override the Draw method to provide specific drawing implementations.
When calling the Draw method on a Shape object, the actual drawing behavior depends on the type of the object (e.g., a circle or rectangle).
[/ul]

4. [b]Interface-based Polymorphism[/b]:
[ul]
Polymorphism can also be achieved through interfaces, where multiple classes implement the same interface and provide their own implementations for its methods.
This allows objects of different classes to be treated uniformly based on their shared interface.
[/ul]

5. [b]Benefits[/b]:
[ul]
Polymorphism promotes code reusability, as methods can be written to operate on objects of a common base class or interface without knowing the specific type of the objects.
It simplifies code maintenance and enhances flexibility, as new derived classes can be added without modifying existing code.
[/ul]

6. [b]Compile-time Polymorphism[/b]:
[ul]
In addition to runtime polymorphism achieved through method overriding, C# also supports compile-time polymorphism (method overloading), where multiple methods with the same name but different parameter lists can coexist in the same class.
[/ul]

Polymorphism is a powerful concept in OOP that enables code to be more adaptable, modular, and extensible. It promotes code reuse and simplifies complex systems by allowing objects of different types to be treated uniformly based on their shared behaviors or interfaces."

[editable path="BGPanel/MarginContainer/ScrollContainer/VBoxContainer/ContentContainer"]
